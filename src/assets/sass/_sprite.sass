// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$expertise1-name: 'expertise1'
$expertise1-x: 50px
$expertise1-y: 0px
$expertise1-offset-x: -50px
$expertise1-offset-y: 0px
$expertise1-width: 49px
$expertise1-height: 50px
$expertise1-total-width: 149px
$expertise1-total-height: 146px
$expertise1-image: '~_images/content/sprite.png'
$expertise1: (50px, 0px, -50px, 0px, 49px, 50px, 149px, 146px, '~_images/content/sprite.png', 'expertise1', )
$expertise2-name: 'expertise2'
$expertise2-x: 99px
$expertise2-y: 0px
$expertise2-offset-x: -99px
$expertise2-offset-y: 0px
$expertise2-width: 50px
$expertise2-height: 42px
$expertise2-total-width: 149px
$expertise2-total-height: 146px
$expertise2-image: '~_images/content/sprite.png'
$expertise2: (99px, 0px, -99px, 0px, 50px, 42px, 149px, 146px, '~_images/content/sprite.png', 'expertise2', )
$expertise3-name: 'expertise3'
$expertise3-x: 0px
$expertise3-y: 96px
$expertise3-offset-x: 0px
$expertise3-offset-y: -96px
$expertise3-width: 28px
$expertise3-height: 50px
$expertise3-total-width: 149px
$expertise3-total-height: 146px
$expertise3-image: '~_images/content/sprite.png'
$expertise3: (0px, 96px, 0px, -96px, 28px, 50px, 149px, 146px, '~_images/content/sprite.png', 'expertise3', )
$expertise4-name: 'expertise4'
$expertise4-x: 0px
$expertise4-y: 0px
$expertise4-offset-x: 0px
$expertise4-offset-y: 0px
$expertise4-width: 50px
$expertise4-height: 50px
$expertise4-total-width: 149px
$expertise4-total-height: 146px
$expertise4-image: '~_images/content/sprite.png'
$expertise4: (0px, 0px, 0px, 0px, 50px, 50px, 149px, 146px, '~_images/content/sprite.png', 'expertise4', )
$expertise5-name: 'expertise5'
$expertise5-x: 99px
$expertise5-y: 42px
$expertise5-offset-x: -99px
$expertise5-offset-y: -42px
$expertise5-width: 41px
$expertise5-height: 50px
$expertise5-total-width: 149px
$expertise5-total-height: 146px
$expertise5-image: '~_images/content/sprite.png'
$expertise5: (99px, 42px, -99px, -42px, 41px, 50px, 149px, 146px, '~_images/content/sprite.png', 'expertise5', )
$expertise6-name: 'expertise6'
$expertise6-x: 0px
$expertise6-y: 50px
$expertise6-offset-x: 0px
$expertise6-offset-y: -50px
$expertise6-width: 50px
$expertise6-height: 46px
$expertise6-total-width: 149px
$expertise6-total-height: 146px
$expertise6-image: '~_images/content/sprite.png'
$expertise6: (0px, 50px, 0px, -50px, 50px, 46px, 149px, 146px, '~_images/content/sprite.png', 'expertise6', )
$spritesheet-width: 149px
$spritesheet-height: 146px
$spritesheet-image: '~_images/content/sprite.png'
$spritesheet-sprites: ($expertise1, $expertise2, $expertise3, $expertise4, $expertise5, $expertise6, )
$spritesheet: (149px, 146px, '~_images/content/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
